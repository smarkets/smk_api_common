import "eto.proto";

package smarkets.seto;

message MessageData {
    enum Type {
        ETO = 1;

        LOGIN = 2;

        ORDER_CREATE = 3;
        ORDER_REJECTED = 4;
        ORDER_ACCEPTED = 5;
        ORDER_EXECUTED = 6;
        ORDER_CANCEL = 7;
        ORDER_CANCELLED = 8;
        ORDER_INVALID = 9;

        MARKET_SUBSCRIPTION = 10;
        MARKET_UNSUBSCRIPTION = 11;
        MARKET_REQUEST = 12;

        MARKET_QUOTES_REQUEST = 13;
        MARKET_QUOTES = 14;
        CONTRACT_QUOTE = 15;
        ID_INVALID = 16;

        DISCONNECT_INSTRUCTION = 17;
        DISCONNECT_INSTRUCTION_RESPONSE = 18;
    }

    required Type type = 1;
    required smarkets.eto.Sequenced eto_seq = 2;

    optional Login login = 3;
    optional OrderCreate order_create = 4;
    optional OrderRejected order_rejected = 5;
    optional OrderAccepted order_accepted = 6;
    optional OrderExecuted order_executed = 7;
    optional OrderCancel order_cancel = 8;
    optional OrderCancelled order_cancelled = 9;
    optional OrderInvalid order_invalid = 10;

    optional MarketSubscription market_subscription = 11;
    optional MarketUnsubscription market_unsubscription = 12;
    optional MarketRequest market_request = 13;

    optional MarketQuotesRequest market_quotes_request = 14;
    optional MarketQuotes market_quotes = 15;
    optional ContractQuote contract_quote = 16;

    optional IdInvalid id_invalid = 17;

    optional DisconnectInstruction disconnect_instruction = 18;
    optional DisconnectInstructionResponse disconnect_instruction_response = 19;
}

message Uuid128 {
    required uint64 low = 1;

    optional uint64 high = 2 [ default = 0 ];
}

enum QuantityType {
    PAYOFF_CURRENCY = 1;
    PREMIUM_CURRENCY = 2;
}

enum PriceType {
    PERCENT_ODDS = 1;
    DECIMAL_ODDS = 2;
}

enum Side {
    BUY = 1;
    SELL = 2;
}

message Login {
    required smarkets.eto.Login eto_login = 1;
    required bytes username = 2;

    optional bytes password = 3;
    optional bytes cookie = 4;
}

message OrderCreate {
    enum Type {
        MARKET = 1;
        LIMIT = 2;
        STOP = 3;
    }

    enum TimeInForce {
        GTC = 1;
        IOC = 2;
    }

    enum AutoCancel {
        PREFERENCE = 1;
        IGNORE_PREFERENCE = 2;
    }

    enum Liquidity {
        ANY = 1;
        MAKE = 2;
        TAKE = 3;
    }

    required Type type = 1;
    required Uuid128 market_uuid = 2;
    required Uuid128 contract_uuid = 3;
    required Side side = 4;
    required QuantityType quantity_type = 5;
    required uint32 quantity = 6;
    required uint32 display_quantity = 7;

    optional PriceType price_type = 8;
    optional uint32 price = 9;
    optional TimeInForce tif = 10;
    optional bool auto_cancel = 11;
    optional uint32 minimum_quantity = 12;
    optional uint32 stop_price = 13;
}

message OrderRejected {
    enum Reason {
        INSUFFICIENT_FUNDS = 1;
        LIMIT_EXCEEDED = 2;
        MARKET_NOT_OPEN = 3;
        MARKET_SETTLED = 4;
        MARKET_HALTED = 5;
        CROSSED_SELF = 6;
    }

    required uint64 seq = 1;
    required Reason reason = 2;
}

message OrderAccepted {
    required uint64 seq = 1;
    required Uuid128 order = 2;
}

message OrderExecuted {
    required Uuid128 order = 1;
    required uint32 price = 2;
    required QuantityType quantity_type = 3;
    required uint32 quantity = 4;
}

message OrderCancel {
    required Uuid128 order = 1;
}

message OrderCancelled {
    enum Reason {
        MEMBER_REQUESTED = 1;
        MARKET_HALTED = 2;
        INSUFFICIENT_LIQUIDITY = 3;
    }
    required Uuid128 order = 1;
    required Reason reason = 2;
}

message OrderInvalid {
    enum Reason {
        INVALID_PRICE = 1;
        INVALID_QUANTITY = 2;
    }

    required uint64 seq = 1;
    repeated Reason reasons = 2;
}

message MarketSubscription {
    required Uuid128 market = 1;
}

message MarketUnsubscription {
    required Uuid128 market = 1;
}

message MarketRequest {
    required Uuid128 market = 1;
}

message MarketQuotesRequest {
    required Uuid128 market = 1;

    optional uint32 depth = 2 [ default = 5 ];
}

message MarketQuotes {
    required Uuid128 market = 1;
    required uint32 depth = 2;

    repeated ContractQuotes contract_quotes = 3;
}

message ContractQuotes {
    required Uuid128 contract = 1;

    repeated Quote buy_quotes = 2;
    repeated Quote sell_quotes = 3;
}

message ContractQuote {
    required Uuid128 contract = 1;
    required Side side = 2;

    repeated Quote quotes = 3;
}

message Quote {
    required PriceType price_type = 1;
    required uint32 price = 2;
    required QuantityType quantity_type = 3;
    required uint32 quantity = 4;
}

message IdInvalid {
    required uint64 seq = 1;

    optional string field = 2;
}

enum DisconnectInstructionPreference {
    NONE = 1;
    CANCEL_ALL = 2;
}

message DisconnectInstruction {
    required DisconnectInstructionPreference preference = 1;
}

message DisconnectInstructionResponse {
    required uint64 seq = 1;
    required DisconnectInstructionPreference preference = 2;
}
