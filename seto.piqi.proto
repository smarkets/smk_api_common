package smarkets.seto;

import "eto.piqi.proto" ;

message market {
    required uint64 low = 1;
    optional uint64 high = 2 [default = 0];
}

message contract {
    required uint64 low = 1;
    optional uint64 high = 2 [default = 0];
}

message order {
    required uint64 low = 1;
    optional uint64 high = 2 [default = 0];
}

message Payload {
    required Payload_Type type = 1;
    required .smarkets.eto.Sequenced eto_seq = 2;
    optional Login Login = 3;
    optional OrderCreate OrderCreate = 4;
    optional OrderRejected OrderRejected = 5;
    optional OrderAccepted OrderAccepted = 6;
    optional OrderExecuted OrderExecuted = 7;
    optional OrderCancel OrderCancel = 8;
    optional OrderCancelled OrderCancelled = 9;
    optional OrderInvalid OrderInvalid = 10;
    optional MarketSubscription MarketSubscription = 11;
    optional MarketUnsubscription MarketUnsubscription = 12;
    optional MarketRequest MarketRequest = 13;
    optional MarketQuotesRequest MarketQuotesRequest = 14;
    optional MarketQuotes MarketQuotes = 15;
    optional ContractQuote ContractQuote = 16;
    optional IdInvalid IdInvalid = 17;
    optional DisconnectInstruction DisconnectInstruction = 18;
    optional DisconnectInstructionResponse DisconnectInstructionResponse = 19;
}

enum Payload_Type {
    Payload_ETO = 1;
    Payload_LOGIN = 2;
    Payload_ORDER_CREATE = 3;
    Payload_ORDER_REJECTED = 4;
    Payload_ORDER_ACCEPTED = 5;
    Payload_ORDER_EXECUTED = 6;
    Payload_ORDER_CANCEL = 7;
    Payload_ORDER_CANCELLED = 8;
    Payload_ORDER_INVALID = 9;
    Payload_MARKET_SUBSCRIPTION = 10;
    Payload_MARKET_UNSUBSCRIPTION = 11;
    Payload_MARKET_REQUEST = 12;
    Payload_MARKET_QUOTES_REQUEST = 13;
    Payload_MARKET_QUOTES = 14;
    Payload_CONTRACT_QUOTE = 15;
    Payload_ID_INVALID = 16;
    Payload_DISCONNECT_INSTRUCTION = 17;
    Payload_DISCONNECT_INSTRUCTION_RESPONSE = 18;
}

message Uuid128 {
    required uint64 low = 1;
    optional uint64 high = 2 [default = 0];
}

message Login {
    required .smarkets.eto.Login Login = 1;
    required string username = 2;
    optional string password = 3;
    optional bytes cookie = 4;
}

message OrderCreate {
    required OrderCreate_Type type = 1;
    required Uuid128 market = 2;
    required Uuid128 contract = 3;
    required Side Side = 4;
    required QuantityType QuantityType = 5;
    required uint32 quantity = 6;
    required uint32 display_quantity = 7;
    optional PriceType PriceType = 8;
    optional uint32 price = 9;
    optional OrderCreate_TimeInForce tif = 10;
    optional OrderCreate_AutoCancel auto_cancel = 11;
    optional uint32 minimum_quantity = 12;
    optional uint32 stop_price = 13;
    optional OrderCreate_Liquidity liquidity = 14;
}

enum OrderCreate_Type {
    OrderCreate_MARKET = 1;
    OrderCreate_LIMIT = 2;
    OrderCreate_STOP = 3;
}

enum OrderCreate_TimeInForce {
    OrderCreate_GTC = 1;
    OrderCreate_IOC = 2;
}

enum OrderCreate_AutoCancel {
    OrderCreate_PREFERENCE = 1;
    OrderCreate_IGNORE_PREFERENCE = 2;
}

enum OrderCreate_Liquidity {
    OrderCreate_ANY = 1;
    OrderCreate_MAKE = 2;
    OrderCreate_TAKE = 3;
}

message OrderRejected {
    required uint64 seq = 1;
    required OrderRejected_Reason reason = 2;
}

enum OrderRejected_Reason {
    OrderRejected_INSUFFICIENT_FUNDS = 1;
    OrderRejected_LIMIT_EXCEEDED = 2;
    OrderRejected_MARKET_NOT_OPEN = 3;
    OrderRejected_MARKET_SETTLED = 4;
    OrderRejected_MARKET_HALTED = 5;
    OrderRejected_CROSSED_SELF = 6;
}

message OrderAccepted {
    required uint64 seq = 1;
    required Uuid128 order = 2;
}

message OrderExecuted {
    required Uuid128 order = 1;
    required uint32 price = 2;
    required QuantityType QuantityType = 3;
    required uint32 quantity = 4;
}

message OrderCancel {
    required Uuid128 order = 1;
}

message OrderCancelled {
    required Uuid128 order = 1;
    required OrderCancelled_Reason reason = 2;
}

enum OrderCancelled_Reason {
    OrderCancelled_MEMBER_REQUESTED = 1;
    OrderCancelled_MARKET_HALTED = 2;
    OrderCancelled_INSUFFICIENT_LIQUIDITY = 3;
}

message OrderInvalid {
    required uint64 seq = 1;
    repeated OrderInvalid_Reason reasons = 2;
}

enum OrderInvalid_Reason {
    OrderInvalid_INVALID_PRICE = 1;
    OrderInvalid_INVALID_QUANTITY = 2;
}

message MarketSubscription {
    required Uuid128 market = 1;
}

message MarketUnsubscription {
    required Uuid128 market = 1;
}

message MarketRequest {
    required Uuid128 market = 1;
}

message MarketQuotesRequest {
    required Uuid128 market = 1;
    optional uint32 depth = 2 [default = 5];
}

message MarketQuotes {
    required Uuid128 market = 1;
    required uint32 depth = 2;
    repeated ContractQuotes ContractQuotes = 3;
}

message ContractQuotes {
    required Uuid128 contract = 1;
    repeated Quote buy_quotes = 2;
    repeated Quote sell_quotes = 3;
}

message ContractQuote {
    required Uuid128 contract = 1;
    required Side Side = 2;
    repeated Quote quotes = 3;
}

message Quote {
    required PriceType PriceType = 1;
    required uint32 price = 2;
    required QuantityType QuantityType = 3;
    required uint32 quantity = 4;
}

message IdInvalid {
    required uint64 seq = 1;
    optional string field = 2;
}

message DisconnectInstruction {
    required DisconnectInstructionPreference preference = 1;
}

message DisconnectInstructionResponse {
    required uint64 seq = 1;
    required DisconnectInstructionPreference preference = 2;
}

enum QuantityType {
    payoff_currency = 1;
    premium_currency = 2;
}

enum PriceType {
    percent_odds = 1;
    decimal_odds = 2;
}

enum Side {
    buy = 1;
    sell = 2;
}

enum DisconnectInstructionPreference {
    none = 1;
    cancel_all = 2;
}

